---
const { class: className } = Astro.props

const pages = (await Astro.glob(
	'../pages/**/*.{md,mdx,astro}'
)) satisfies Array<{ url: string; file: string }>

const links = pages
	.map(({ url, file }) => ({
		url: url || '/',
		title: url.split('/').pop() || 'main',
		level: url.match(/\//g)?.length || 0,
		file,
	}))
	.sort((a, b) => a.url.localeCompare(b.url))
---

<nav class:list={[className, 'p-4', 'overflow-auto', 'h-screen']}>
	<ul>
		{
			links.map(({ url, title, level }) => (
				<li class="font-mono whitespace-nowrap">
					<a
						href={url}
						class:list={[
							'flex',
							{ 'pointer-events-none': Astro.url.pathname === url },
						]}
					>
						<>
							<span class="text-slate-200 dark:text-amber-900">
								{''.padStart(level * 2, '-')}
							</span>
							<span
								class:list={[
									Astro.url.pathname === url
										? 'font-bold italic text-black dark:text-amber-500'
										: 'text-slate-600 dark:text-amber-200',
									'flex-grow',
									'hover:underline',
									'underline-offset-4',
								]}
							>
								{title}
							</span>
						</>
					</a>
				</li>
			))
		}
	</ul>
</nav>
